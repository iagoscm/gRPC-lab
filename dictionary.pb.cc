// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dictionary.proto

#include "dictionary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dictionary {
PROTOBUF_CONSTEXPR WordRequest::WordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.word_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WordRequestDefaultTypeInternal() {}
  union {
    WordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WordRequestDefaultTypeInternal _WordRequest_default_instance_;
PROTOBUF_CONSTEXPR WordResponse::WordResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.words_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WordResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WordResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WordResponseDefaultTypeInternal() {}
  union {
    WordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WordResponseDefaultTypeInternal _WordResponse_default_instance_;
PROTOBUF_CONSTEXPR WordEntry::WordEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.word_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WordEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WordEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WordEntryDefaultTypeInternal() {}
  union {
    WordEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WordEntryDefaultTypeInternal _WordEntry_default_instance_;
}  // namespace dictionary
static ::_pb::Metadata file_level_metadata_dictionary_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dictionary_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dictionary_2eproto = nullptr;

const uint32_t TableStruct_dictionary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dictionary::WordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dictionary::WordRequest, _impl_.word_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dictionary::WordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dictionary::WordResponse, _impl_.words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dictionary::WordEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dictionary::WordEntry, _impl_.word_),
  PROTOBUF_FIELD_OFFSET(::dictionary::WordEntry, _impl_.count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dictionary::WordRequest)},
  { 7, -1, -1, sizeof(::dictionary::WordResponse)},
  { 14, -1, -1, sizeof(::dictionary::WordEntry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dictionary::_WordRequest_default_instance_._instance,
  &::dictionary::_WordResponse_default_instance_._instance,
  &::dictionary::_WordEntry_default_instance_._instance,
};

const char descriptor_table_protodef_dictionary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020dictionary.proto\022\ndictionary\"\033\n\013WordRe"
  "quest\022\014\n\004word\030\001 \001(\t\"4\n\014WordResponse\022$\n\005w"
  "ords\030\001 \003(\0132\025.dictionary.WordEntry\"(\n\tWor"
  "dEntry\022\014\n\004word\030\001 \001(\t\022\r\n\005count\030\002 \001(\0052U\n\021D"
  "ictionaryService\022@\n\013ProcessWord\022\027.dictio"
  "nary.WordRequest\032\030.dictionary.WordRespon"
  "seb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dictionary_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dictionary_2eproto = {
    false, false, 250, descriptor_table_protodef_dictionary_2eproto,
    "dictionary.proto",
    &descriptor_table_dictionary_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_dictionary_2eproto::offsets,
    file_level_metadata_dictionary_2eproto, file_level_enum_descriptors_dictionary_2eproto,
    file_level_service_descriptors_dictionary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dictionary_2eproto_getter() {
  return &descriptor_table_dictionary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dictionary_2eproto(&descriptor_table_dictionary_2eproto);
namespace dictionary {

// ===================================================================

class WordRequest::_Internal {
 public:
};

WordRequest::WordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dictionary.WordRequest)
}
WordRequest::WordRequest(const WordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.word_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.word_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.word_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_word().empty()) {
    _this->_impl_.word_.Set(from._internal_word(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dictionary.WordRequest)
}

inline void WordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.word_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.word_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.word_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WordRequest::~WordRequest() {
  // @@protoc_insertion_point(destructor:dictionary.WordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.word_.Destroy();
}

void WordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dictionary.WordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.word_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dictionary.WordRequest.word"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dictionary.WordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dictionary.WordRequest.word");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_word(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dictionary.WordRequest)
  return target;
}

size_t WordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dictionary.WordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WordRequest::GetClassData() const { return &_class_data_; }


void WordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WordRequest*>(&to_msg);
  auto& from = static_cast<const WordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dictionary.WordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_word().empty()) {
    _this->_internal_set_word(from._internal_word());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WordRequest::CopyFrom(const WordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dictionary.WordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordRequest::IsInitialized() const {
  return true;
}

void WordRequest::InternalSwap(WordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.word_, lhs_arena,
      &other->_impl_.word_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dictionary_2eproto_getter, &descriptor_table_dictionary_2eproto_once,
      file_level_metadata_dictionary_2eproto[0]);
}

// ===================================================================

class WordResponse::_Internal {
 public:
};

WordResponse::WordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dictionary.WordResponse)
}
WordResponse::WordResponse(const WordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WordResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.words_){from._impl_.words_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dictionary.WordResponse)
}

inline void WordResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.words_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WordResponse::~WordResponse() {
  // @@protoc_insertion_point(destructor:dictionary.WordResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.words_.~RepeatedPtrField();
}

void WordResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dictionary.WordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.words_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WordResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dictionary.WordEntry words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dictionary.WordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dictionary.WordEntry words = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_words_size()); i < n; i++) {
    const auto& repfield = this->_internal_words(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dictionary.WordResponse)
  return target;
}

size_t WordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dictionary.WordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dictionary.WordEntry words = 1;
  total_size += 1UL * this->_internal_words_size();
  for (const auto& msg : this->_impl_.words_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WordResponse::GetClassData() const { return &_class_data_; }


void WordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WordResponse*>(&to_msg);
  auto& from = static_cast<const WordResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dictionary.WordResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.words_.MergeFrom(from._impl_.words_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WordResponse::CopyFrom(const WordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dictionary.WordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordResponse::IsInitialized() const {
  return true;
}

void WordResponse::InternalSwap(WordResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.words_.InternalSwap(&other->_impl_.words_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WordResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dictionary_2eproto_getter, &descriptor_table_dictionary_2eproto_once,
      file_level_metadata_dictionary_2eproto[1]);
}

// ===================================================================

class WordEntry::_Internal {
 public:
};

WordEntry::WordEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dictionary.WordEntry)
}
WordEntry::WordEntry(const WordEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WordEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.word_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.word_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.word_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_word().empty()) {
    _this->_impl_.word_.Set(from._internal_word(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:dictionary.WordEntry)
}

inline void WordEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.word_){}
    , decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.word_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.word_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WordEntry::~WordEntry() {
  // @@protoc_insertion_point(destructor:dictionary.WordEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WordEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.word_.Destroy();
}

void WordEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WordEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:dictionary.WordEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.word_.ClearToEmpty();
  _impl_.count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WordEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dictionary.WordEntry.word"));
        } else
          goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WordEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dictionary.WordEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dictionary.WordEntry.word");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_word(), target);
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dictionary.WordEntry)
  return target;
}

size_t WordEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dictionary.WordEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WordEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WordEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WordEntry::GetClassData() const { return &_class_data_; }


void WordEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WordEntry*>(&to_msg);
  auto& from = static_cast<const WordEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dictionary.WordEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_word().empty()) {
    _this->_internal_set_word(from._internal_word());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WordEntry::CopyFrom(const WordEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dictionary.WordEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordEntry::IsInitialized() const {
  return true;
}

void WordEntry::InternalSwap(WordEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.word_, lhs_arena,
      &other->_impl_.word_, rhs_arena
  );
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WordEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dictionary_2eproto_getter, &descriptor_table_dictionary_2eproto_once,
      file_level_metadata_dictionary_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dictionary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dictionary::WordRequest*
Arena::CreateMaybeMessage< ::dictionary::WordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dictionary::WordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dictionary::WordResponse*
Arena::CreateMaybeMessage< ::dictionary::WordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dictionary::WordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dictionary::WordEntry*
Arena::CreateMaybeMessage< ::dictionary::WordEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dictionary::WordEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
