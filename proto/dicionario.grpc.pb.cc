// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/dicionario.proto

#include "proto/dicionario.pb.h"
#include "proto/dicionario.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dicionario {

static const char* DicionarioService_method_names[] = {
  "/dicionario.DicionarioService/AddPalavra",
  "/dicionario.DicionarioService/PrintaDicionario",
};

std::unique_ptr< DicionarioService::Stub> DicionarioService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DicionarioService::Stub> stub(new DicionarioService::Stub(channel, options));
  return stub;
}

DicionarioService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddPalavra_(DicionarioService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrintaDicionario_(DicionarioService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DicionarioService::Stub::AddPalavra(::grpc::ClientContext* context, const ::dicionario::RequestPalavra& request, ::dicionario::RespostaPalavra* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dicionario::RequestPalavra, ::dicionario::RespostaPalavra, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPalavra_, context, request, response);
}

void DicionarioService::Stub::async::AddPalavra(::grpc::ClientContext* context, const ::dicionario::RequestPalavra* request, ::dicionario::RespostaPalavra* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dicionario::RequestPalavra, ::dicionario::RespostaPalavra, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPalavra_, context, request, response, std::move(f));
}

void DicionarioService::Stub::async::AddPalavra(::grpc::ClientContext* context, const ::dicionario::RequestPalavra* request, ::dicionario::RespostaPalavra* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPalavra_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dicionario::RespostaPalavra>* DicionarioService::Stub::PrepareAsyncAddPalavraRaw(::grpc::ClientContext* context, const ::dicionario::RequestPalavra& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dicionario::RespostaPalavra, ::dicionario::RequestPalavra, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPalavra_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dicionario::RespostaPalavra>* DicionarioService::Stub::AsyncAddPalavraRaw(::grpc::ClientContext* context, const ::dicionario::RequestPalavra& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPalavraRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DicionarioService::Stub::PrintaDicionario(::grpc::ClientContext* context, const ::dicionario::PrintaRequest& request, ::dicionario::PrintaResposta* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dicionario::PrintaRequest, ::dicionario::PrintaResposta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrintaDicionario_, context, request, response);
}

void DicionarioService::Stub::async::PrintaDicionario(::grpc::ClientContext* context, const ::dicionario::PrintaRequest* request, ::dicionario::PrintaResposta* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dicionario::PrintaRequest, ::dicionario::PrintaResposta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrintaDicionario_, context, request, response, std::move(f));
}

void DicionarioService::Stub::async::PrintaDicionario(::grpc::ClientContext* context, const ::dicionario::PrintaRequest* request, ::dicionario::PrintaResposta* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrintaDicionario_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dicionario::PrintaResposta>* DicionarioService::Stub::PrepareAsyncPrintaDicionarioRaw(::grpc::ClientContext* context, const ::dicionario::PrintaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dicionario::PrintaResposta, ::dicionario::PrintaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrintaDicionario_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dicionario::PrintaResposta>* DicionarioService::Stub::AsyncPrintaDicionarioRaw(::grpc::ClientContext* context, const ::dicionario::PrintaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrintaDicionarioRaw(context, request, cq);
  result->StartCall();
  return result;
}

DicionarioService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DicionarioService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DicionarioService::Service, ::dicionario::RequestPalavra, ::dicionario::RespostaPalavra, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DicionarioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dicionario::RequestPalavra* req,
             ::dicionario::RespostaPalavra* resp) {
               return service->AddPalavra(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DicionarioService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DicionarioService::Service, ::dicionario::PrintaRequest, ::dicionario::PrintaResposta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DicionarioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dicionario::PrintaRequest* req,
             ::dicionario::PrintaResposta* resp) {
               return service->PrintaDicionario(ctx, req, resp);
             }, this)));
}

DicionarioService::Service::~Service() {
}

::grpc::Status DicionarioService::Service::AddPalavra(::grpc::ServerContext* context, const ::dicionario::RequestPalavra* request, ::dicionario::RespostaPalavra* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DicionarioService::Service::PrintaDicionario(::grpc::ServerContext* context, const ::dicionario::PrintaRequest* request, ::dicionario::PrintaResposta* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dicionario

